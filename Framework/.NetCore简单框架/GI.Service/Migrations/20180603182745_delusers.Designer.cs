// <auto-generated />
using System;
using GI.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GI.Service.Migrations
{
    [DbContext(typeof(GIContext))]
    [Migration("20180603182745_delusers")]
    partial class delusers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GI.Service.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDel");

                    b.Property<string>("PermissionName");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("GI.Service.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsDel");

                    b.Property<string>("RoleName");

                    b.HasKey("Id");

                    b.HasIndex("RoleName");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("GI.Service.Models.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("PermissionId");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("GI.Service.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDel");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.HasIndex("UserName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GI.Service.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId");

                    b.HasAlternateKey("RoleId");

                    b.HasIndex("RoleId", "UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("GI.Service.Models.RolePermission", b =>
                {
                    b.HasOne("GI.Service.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GI.Service.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GI.Service.Models.UserRole", b =>
                {
                    b.HasOne("GI.Service.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GI.Service.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
